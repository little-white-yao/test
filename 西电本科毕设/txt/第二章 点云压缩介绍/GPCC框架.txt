本文主要对国际动态图像专家组MPEG提出的几何点云压缩（G-PCC）展开研究，该组织在为了方便测试和研究，推出了TMC13(Test Model for Category1 and Catgory3) 模型软件，作为公开探索实验的参考平台。这一平台的具体编解码框架如图所示。
从图中我们可以看出，不论是在编码端还是在解码端，几何信息和属性信息的编码都是分开进行的，以编码端为例：
几何信息编码首先对原始点云数据进行预处理，将点云几何信息进行坐标转换，使得变换后的点都在包围（BoundingBox）内再进行量化和重复点去除工作。然后对包围盒进行八叉树（Octree）划分，通过递归细分立方体的方法来构建八叉树结构。立方体每次八等分被划分成八个子立方体，之后再对非空的子立方体进行八等分，直到划分到体素大小为 1×1×1，使用占用码（occupancy code）表示一个立方体是否包含子立方体，1表示被占据，0表示不被占据，最后将占位信息送入熵编码器得到几何码流。Octree几何编码常用于TMC3，即动态获取点云，而针对表面稠密的静态点云（TMC1），Trisoup几何编码方式更具优势。Trisoup 是一种基于八叉树的几何编码方式，该方法先用八叉树划分到一定体素大小，然后应用 Trisoup 进行确定顶点和对顶点熵编码以达到压缩的目的，然后通过三角重建近似曲面进行解压缩，后续的属性编码也是基于重建后的点云进行。
属性信息编码首先选择是否对对输入的属性信息进行颜色空间转换，目前TMC13 平台支持将颜色属性从 GBR 转换成 YUV 空间。当几何有损时，需要对点云进行属性转换，也就是对几何重建出来的点云重新赋予颜色信息。之后进行属性信息编码，根据不同的测试序列和条件选择适合的编码方式。接着将属性残差经过系数量化处理，最后通过熵编码得到最终的属性码流。
解码端对码流的处理流程即为编码端的逆过程。
另外，在现有的G-PCC标准中，使用Trisoup几何编码方式时，其熵编码过程用到了动态更新的最佳二值化技术（动态OBUF），相比于OBUf，该技术将上下文信息分为了主要信息和次要信息两部分，其中，主要信息用较少的bir位包含了上下文信息中最相关的部分，因此它不会变化；相反，次要信息会根据已使用的上下文信息能否将点云有效的区分开来进而来决定是否继续使用下一bit位上下文信息。这也是本文的主要研究内容。
