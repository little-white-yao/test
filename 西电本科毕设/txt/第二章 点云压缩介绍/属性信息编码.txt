由图可以直观的看出，G-PCC主要包括两种属性变换编码方法，第一种是基于插值的带更新/提升的分层最近邻预测（Lifting Transform），第二种是区域自适应分层变换（RAHT）。其中，与Trisoup几何编码方法配合使用的主要是第二种。另外，这两种变换编码方式通常用于第一类点云数据。
2.5.1颜色变换
G-PCC提供了颜色空间转换的功能，方便在不同场景下，应用合适的颜色空间。例如从RGB到YUV的颜色空间转换，具体公式如下所示：

转换的逆过程有：

其中，在整个颜色转换的过程中，使用的所有数据都是浮点型的，但是标准定义的输出结果统一转换为unit8_t格式，因此经过颜色空间转换后，颜色信息会产生一定的偏差，这也就限定了颜色空间转换只适应于属性有损条件下进行。
2.5.2属性转换
进行属性信息编码前，因为当几何编码是有损时，重建出来的点云坐标位置与原始几何坐标有偏差，所以重建的点云没有属性信息，这个时候需要将原始的属性信息进行属性转换，为点云重新着色，同时需要保证属性失真最小。目前，在TMC13中，可以通过计算原始点云值多个近邻的距离加权平均数来实现属性转换。具体的属性转换过程如下：
1、为重建点云（Xi^i=01234...Nrec-1）建立起KD-Tree，将三个维度中的最长边方向作为划分主轴，其次基于划分主轴方向对重建点云进行划分。然后遍历原始点云的每个点，在重建点云KD-Tree结构中进行最近邻居点（Ref1）查找。由于是遍历的原始点云，因此最近邻居点会出现两种情况，一种是在重建点云中某个点作为原始点云中多个点的最近邻居点；第二种是原始点云中所有点都不会将某个重建点作为最近邻居点。
2、对原始点云(Xi)i=0···N−1建立起KD-Tree，将三个维度中的最长边方向作为划分主轴，其次基于划分主轴方向对重建点云进行划分。然后遍历重建点云中的每个点，在原始点云KD-Tree结构中进行最近邻居点（Ref2）查找。但是由于是遍历重建点云的每一个点，每重建点都会找到一个原始点云作为其最近邻居。
3、首先判断Ref1集合是否为空，如果为空，则当前重建点的属性信息由相应索引的Ref2得到，否则当前重建点的属性由公式可得：

其中，N为Ref1集合中，原始点云属性值数量。
2.5.3RAHT变换编码
RAHT变换也叫区域自适应分层变换，是Haar小波变换在三维空间上的扩展，利用八叉树中每个子节点的权重也就是包含点的个数，对属性信息进行加权小波变换。该方法按照八叉树向后扫描的顺序，从体素到整个空间进行向后扫描，每步都将体素重新组合成更大的体素，直至到达根节点。之后分别从xyz三个方向对每一层八叉树节点进行变换。在八叉树划分的结构下，相邻节点里的属性值可能会比较相近，即这些属性信号的交流分量几乎为0，能量主要集中在直流分量上，通过变换将原始属性值转换成对应的AC，DC系数，就可以更好的对信号进行压缩去冗余。RATH变换主要过程如下：
1、构建和解析树
开始构建树时，需要对点云中所有的点按照莫顿序逐次进行扫描，通过莫顿码右移，不断将点云序列中的点进行合并，从而逐层构建树。在构建树的过程中，每个点的初始权重 weightorg 设置为 1，初始颜色属性为 Attrorg, 每当两个点进行合并时，合并后点的属性值和权重为:

2.5.4Lifting预测变换编码
Lifting 变换编码是一种依赖于多层 LOD（Level Of Detail）的属性编码方式
其中，H(N)表示高层次点云，L(N)表示低层次点云。L(N)是与LOD（N）相关的属性集，H(N)是与细化层相关的属性集。