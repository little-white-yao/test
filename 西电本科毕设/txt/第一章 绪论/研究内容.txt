现有点云压缩将从两方面进行，分别是几何信息压缩和属性信息压缩。其中几何信息的压缩是指利用某些编码方式来编码重建点云的几何坐标，并且在解码端可以恢复出具有三维位置信息的点。而属性信息的压缩针对重建点云中的点附带的一些属性信息，例如颜色、反射率等。目前 MPEG 批准的用于点云压缩的 G-PCC 编码标准中，首先进行几何编码，之后基于重建的几何信息再进行属性编码。本文重点研究几何信息编码。
目前 MPEG 针对 PCC 中的几何编码，采用的是八叉树或者Trisoup算法。八叉树编码主要是通过将点云不断进行八叉划分，划分出 8 个节点，并用 8 个比特表示，根据子节点的占据情况，决定 8 个比特的 0，1 分布。接着对于占据的子节点进一步划分，直到划分到最小的节点为止，并最终通过熵编码对产生的码流进行压缩。Octree 几何编码常用于 TMC3，即动态获取点云。Trisoup几何编码方式常用于 TMC1，即静态获取且表面密集的点云。在 TMC1 几何信息编码中，常常先用八叉树划分到一定层次，然后应用 Trisoup 进行确定顶点和对顶点熵编码以达到压缩的目的，然后通过三角重建近似曲面进行解压缩，也就是说 Trisoup 是一种基于八叉树的几何编码方式。但是在当前几何信息编码标准测试环境中，对于每一个点云文件在进行编码时八叉树应该划分到哪一层都有固定的值，由参数 trisoupNodeSizeLog2 确定。
其中Trisoup算法为了使最后的熵编码更加的高效，编码得到的 bit 流更小，熵编码顶点信息过程中使用了动态 OBUF。顶点标识信息与顶点位置信息分开编码，用到了两组不同的上下文信息，同时上下文信息又分为主要信息与次要信息：主要信息用较少的 bit 数承载了绝大部分相关性信息，我们去除该相关性以后再进行熵编码，码流显然会减少；次要信息的动态使用则是动态 OBUF 的特点所在，它会根据熵编码输出的值更新 LUT 以及上下文使用数量。因此，次要信息中的上下文顺序与熵编码码流的大小有着直接的关联，最佳的上下文顺序可以使熵编码码流达到最小值，有效提高熵编码效率。
本文主要分析研究Trisoup算法中的熵编码过程，在现有上下文基础上，通过测试次要信息中各个上下文的性能来决定其使用顺序。通过对比更改顺序前后在各个类型测试序列下的性能结果来评判上下文顺序是否得到优化。最终引入自适应的上下文顺序选择算法，为不同类型的点云序列选用最合适的上下文顺序，从而最大程度的减小码流，提高编码效率。